.\" Text automatically generated by txt2man
.TH ff 1 "20 May 2020" "ff 516" ""
.SH NAME
\fBff \fP- Search for files in the filesystem
\fB
.SH SYNOPSIS
.nf
.fam C
\fBff\fP [<options>] [<expression/directory> \.\.\. | [\fB-D\fP] <directory> \.\.\.]

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBff\fP(1) is a tool for searching the filesystem for entries that all share a set
of common features. It was inspired by \fBfd\fP(1) but is more powerful and
versatile without being too complex. \fBff\fP(1) aims to be a more user-friendly
alternative to \fBfind\fP(1).
.PP
\fBff\fP(1)'s primary goal is to be an interactive tool that is intuitive,
effective and easy to use. It is optimized for narrowing down a list of
entries step by step. It lets you match many file attributes in many
different ways and is extensible by plugins.
.PP
\fBff\fP(1) takes a set of expressions and directories as arguments and uses them
for searching. If no arguments are specified, \fBff\fP(1) lists all files and
directories below the directory you are currently in.
.PP
Whether an argument is an expression or a directory is detected
automatically. Directories may be at the start or the end of the list of
arguments. They are identified as directories when they contain at least one
\(cq/' and point to an existing name in the filesystem. However, directories can
be explicitly specified using the \fB-D\fP/\fB--directories\fP option, in which case
auto-detection will not be used. If no directory argument is found the
current directory is used as the starting point.
.PP
\fBff\fP(1) uses parallel processes to speed up searching by default. The number of
processes depends on the number of CPU cores and can be controlled with
\fB-j\fP/\fB--jobs\fP.
.SH OPTIONS
Global options:
.TP
.B
\fB--cache\fP
Location of the metadata cache (default: /home/lars/.cache/ff.db).
.TP
.B
\fB--no-cache\fP
Do not use the metadata cache.
.TP
.B
\fB-j\fP, \fB--jobs\fP <num>
Set number of processes to use for searching and executing (default: the number of CPU cores).
.TP
.B
<expression/directory>
An expression for matching files or a directory to search.
.TP
.B
\fB-D\fP, \fB--directories\fP <path> [<path> \.\.\.]
Search entries in these paths (default is current directory).
.PP
Commands:
.TP
.B
\fB-h\fP, \fB--help\fP [<plugin>]
Show this help message or the help message for a particular plugin.
.TP
.B
\fB--version\fP
Show program's version number and exit.
.TP
.B
\fB--list-attributes\fP
Show a list of available attributes to use for searching, sorting and output.
.TP
.B
\fB--list-plugins\fP
Show the list of available plugins.
.TP
.B
\fB--list-types\fP
Show the list of available types.
.PP
Search options:
.TP
.B
\fB-H\fP, \fB--hidden\fP
Show hidden files and directories.
.TP
.B
\fB-I\fP, \fB--ignored\fP
Show files that are normally excluded by patterns from .(git|fd|\fBff\fP)ignore files.
.TP
.B
\fB-e\fP, \fB--exclude\fP <expression>
Exclude entries that match the given expression.
.TP
.B
\fB-g\fP, \fB--glob\fP
Treat the pattern as a literal string.
.TP
.B
\fB-r\fP, \fB--regex\fP
Perform a regular-expression based search (default).
.TP
.B
\fB-F\fP, \fB--fixed-strings\fP
Treat the pattern as a literal string.
.TP
.B
\fB-c\fP, \fB--case\fP <mode>
How to treat the case of text attributes (smart, ignore or sensitive).
.TP
.B
\fB-a\fP, \fB--absolute-path\fP
Show absolute instead of relative paths.
.TP
.B
\fB-L\fP, \fB--follow\fP
Follow symbolic links.
.TP
.B
\fB-p\fP, \fB--full-path\fP
Search full path (default: file-/dirname only).
.TP
.B
\fB--one-file-system\fP, \fB--mount\fP, \fB--xdev\fP
Do not descend into different file systems.
.PP
Output options:
.TP
.B
\fB-x\fP, \fB--exec\fP <cmd>
Execute a command for each search result.
.TP
.B
\fB-X\fP, \fB--exec-batch\fP <cmd>
Execute a command with all search results at once.
.TP
.B
\fB-C\fP, \fB--color\fP <when>
When to use colors: never, *auto*, always.
.TP
.B
\fB-0\fP, \fB--print0\fP
Separate results by the null character.
.TP
.B
\fB-v\fP, \fB--verbose\fP
Produce output similar to `ls \fB-l\fP`.
.TP
.B
\fB-S\fP, \fB--sort\fP [<attribute-list>]
Sort entries by path or any other attribute.
.TP
.B
\fB-R\fP, \fB--reverse\fP
Reverse the sort order.
.TP
.B
\fB-l\fP, \fB--limit\fP N
Limit output to at most N entries.
.TP
.B
\fB-1\fP
Print only the first entry and exit immediately.
.TP
.B
\fB-o\fP, \fB--output\fP <attribute-list>
Print each entry by using a template of comma-separated attributes. The special value 'file' stands for all file attributes.
.TP
.B
\fB--sep\fP
Separate each attribute of \fB--output\fP with <string>, default is a single space.
.TP
.B
\fB--json\fP
Print attributes as one big json object to stdout.
.TP
.B
\fB--jsonl\fP
Print attributes as jsonl (one json object per line) to stdout.
.TP
.B
\fB--si\fP
Parse and print file sizes in units of 1K=1000 bytes instead of 1K=1024 bytes.
.SH TESTS
All command line arguments that do not point to a directory will be used as
test expressions. Each filesystem entry is matched against the list of
these tests going from left to right. We start with a set of all entries, and
the tests are used to narrow this set down, or remove particular entries from
the set.
.PP
A test basically has the form:
.PP
.nf
.fam C
    [<[plugin.]attribute><operator>]<value>

.fam T
.fi
An test matches a certain <value> or pattern against a certain <attribute> of
a filesystem entry. The type of test performed is denoted by the <operator>.
.PP
The simplest form of a test is to just specify <value>. It is a shorthand for
.PP
.nf
.fam C
    file.name~<value>

.fam T
.fi
which means that each entry's basename is matched against the regular
expression <value>. (This default behavior can be changed with the
\fB-r\fP/\fB--regex\fP, \fB-F\fP/\fB--fixed-strings\fP, \fB-g\fP/\fB--glob\fP and \fB-p\fP/\fB--full-path\fP options.)
.PP
It is good practice to use full attribute names and to quote either the value
or the whole expression to prevent the shell from interfering with characters
like '*', '(', ')', '<', '>', etc.
.PP
Tests can be grouped with 'AND' and 'OR' operators and parenthesis, whereas
the 'AND' can be omitted, because it is redundant. Please note that
parenthesis must be escaped or quoted properly to prevent the shell from
interpreting them. Alternatively, you can use '{{' and '}}' instead.
.SH ATTRIBUTES
\fBff\fP(1) lets you search in a wide variety of file attributes. This list of
attributes is provided by plugins. Essential plugins are built in, and you
can also add your own plugins written in \fBpython\fP(1).
.PP
You can list all available attributes this way: `\fBff\fP \fB--list-attributes\fP`.
.PP
The full name of an attribute consists of the <plugin> name, a dot, and the
<attribute> name. The plugin part of the attribute is optional unless the
same attribute name is provided by multiple plugins. It will produce an error
if an attribute name in an expression is ambiguous. An exception is the
\(cqfile' plugin whose attribute names are global, always take precedence and
will never produce an error. For all other attributes it is recommended to
always write the full attribute name including the <plugin> portion, e.g. to
avoid possible runtime errors in shell scripts.
.PP
The builtin attributes are as follows:
.TP
.B
[file.]path :: string
The full pathname of the file. It will be relative to the current working directory depending on the <directory> arguments that were given on the command line. This can be changed with the \fB-a\fP/\fB--absolute\fP path option.
.TP
.B
[file.]root :: string
The start directory the file was found in.
.TP
.B
[file.]relpath :: string
The pathname of the file relative to the start directory.
.TP
.B
[file.]dir :: string
The dirname portion of the file.
.TP
.B
[file.]name :: string
The basename portion of the file
.TP
.B
[file.]ext :: string
The file extension without the leading dot or the empty string if
the file has no extension.
.TP
.B
[file.]pathx :: string
The file path without the extension.
.TP
.B
[file.]namex :: string
The file basename without the extension.
.TP
.B
[file.]device :: number
The number of the device the file is located.
.TP
.B
[file.]inode :: number
The number of the inode of the file.
.TP
.B
[file.]samedev :: boolean
Whether the file is on the same device as the start directory.
.TP
.B
[file.]depth :: number
The depth of the file relative to the start directory.
.TP
.B
[file.]type :: filetype
The file type: one of 'd'/'directory', 'f'/'file', 'l'/'symlink',
\(cqs'/'socket', 'p'/'pipe'/'fifo', 'char', 'block', 'door', 'port',
\(cqwhiteout' or 'other'.
.TP
.B
[file.]exec :: boolean
Whether the file is executable or not.
.TP
.B
[file.]size :: size
The size of the file in bytes. All types except 'file' have a size
of 0.
.TP
.B
[file.]mtime :: time
The modification time of the file in seconds since epoch.
.TP
.B
[file.]ctime :: time
The inode change time of the file in seconds since epoch.
.TP
.B
[file.]atime :: time
The access time of the file in seconds since epoch.
.TP
.B
[file.]time :: time
An alias for 'mtime'.
.TP
.B
[file.]mode :: mode
The mode and permission bits of the file.
.TP
.B
[file.]perm :: mode
The permission bits of the file without the file type bits.
.TP
.B
[file.]links :: number
The number of links to the inode.
.TP
.B
[file.]uid :: number
The user id of the owner of the file.
.TP
.B
[file.]gid :: number
The group id of the owner of the file.
.TP
.B
[file.]user :: string
The user name of the owner of the file.
.TP
.B
[file.]group :: string
The group name of the owner of the file.
.TP
.B
[file.]hide :: boolean
Whether the the name of the file starts with a dot.
.TP
.B
[file.]hidden :: boolean
Whether the file is "hidden" or not, i.e. if one of the path
components contains a leading dot.
.TP
.B
[file.]empty :: boolean
Whether the file or directory is empty or not.
.TP
.B
[file.]link :: string
The target path of a symbolic link relative to its parent directory. Empty if the file is not a symbolic link.
.TP
.B
[file.]target :: string
The full target path of a symbolic link. Empty if the file is not a symbolic link.
.TP
.B
[file.]broken :: boolean
Whether the target of a symbolic link points to a file that does not exist.
.TP
.B
[file.]mime :: string
The mime type of the file based on the file extension.
.TP
.B
[file.]class :: string
The leading component of the file's mime type.
.TP
.B
[file.]text :: boolean
Whether the file contains text or binary data.
.TP
.B
[file.]mount :: boolean
Whether the entry is a mountpoint.
.PP
There are also some attributes available for media files. Their availability
depends on the presence of the 'pymediafile' python module.
.TP
.B
medium.duration :: duration
The duration of a medium (audio, video) in seconds.
.TP
.B
medium.artist :: string
The artist audio tag of the file.
.TP
.B
medium.album :: string
The album audio tag of the file.
.TP
.B
medium.title :: string
The title audio tag of the file.
.TP
.B
medium.genre :: string
The genre audio tag of the file.
.TP
.B
medium.date :: string
The date audio tag of the file.
.TP
.B
medium.format :: string
The format of an image ('png', 'jpeg', etc.) in case the file is an image.
.TP
.B
medium.width :: number
The width of a visual medium (image, video) in pixel.
.TP
.B
medium.height :: number
The height of a visual medium (image, video) in pixel.
.RE
.PP

.SH TYPES
Each attribute has been assigned a certain type that describes how its value
is supposed to be interpreted and which operators it supports. Beside the
usual 'string', 'number' and 'boolean' types there are types for file sizes,
file permissions, timestamps, durations etc.
.PP
Durations consist of one or more partial time designations that are summed up, e.g.:
.PP
.nf
.fam C
    1h30m25s

.fam T
.fi
The valid units are: 's' for seconds, 'm' for minutes, 'h' for hours, 'd' for
days, 'w' for weeks (7 days), 'M' for months (30 days) and 'y' for years (365
days). If no unit is given 'm' for minutes is assumed.
.PP
There are a number of predefined date and time parsing patterns for
attributes providing a 'time' type.
.TP
.B
- YY-mm-dd HH:MM:SS
.TP
.B
- YY-mm-dd HH:MM
.TP
.B
- YYmmddHHMM
.TP
.B
- YY-mm-dd
.TP
.B
- YYmmdd
.TP
.B
- HH:MM:SS
.TP
.B
- HH:MM
.TP
.B
- HHMM
.SH OPERATORS
The third component in a test beside the <attribute> and the <value> is the
<operator>.
.PP
There are operators for numbers:
.TP
.B
=
attribute is equal to <value>
.TP
.B
+= >=
attribute is greater than or equal to <value>
.TP
.B
-= <=
attribute is less than or equal to <value>
.TP
.B
+ >
attribute is greater than <value>
.TP
.B
- <
attribute is less than <value>
.PP
Please note that the > and < characters must be properly quoted to avoid
being interpreted as redirections by the shell, which is why the + and -
forms are preferred.
.PP
Operators for strings:
.TP
.B
=
attribute is equal to <value>
.TP
.B
:
contains substring <value>
.TP
.B
~
matches regular expression <value>
.TP
.B
%
matches glob pattern <value>
.PP
Operators for lists of strings:
.TP
.B
=
one string in the list is equal to <value>
.TP
.B
:
one string contains substring <value>
.TP
.B
~
one string matches regular expression <value>
.TP
.B
%
one string matches glob pattern <value>
.PP
Operators for booleans:
.TP
.B
=
attribute is equal to <value>, which may be one of (true, t, 1, yes,
y, on) or (false, f, 0, no, n, off). The case is ignored.
.PP
Operators for mode:
.TP
.B
=
all bits from the attribute are exactly equal to <value>
.TP
.B
:
all bits that are set in <value> are also set in the attribute
.TP
.B
~
any of the bits that are set in <value> are set in the attribute
.SH FILE REFERENCES
It is possible to pass a path of a file as reference instead of a value. To
use a reference you pass a '{}' followed by the path name as the value. For
example, to find all files newer than foo/bar/example.txt you do:
.PP
.nf
.fam C
    ff mtime+{}foo/bar/example.txt

.fam T
.fi
The default behavior is to use the same attribute of the referenced file as
the one it is supposed to be compared to, but it is also possible to use a
different one:
.PP
.nf
.fam C
    ff mtime+{atime}foo/bar/example.txt

.fam T
.fi
.SH OUTPUT
The contents of what is printed to standard output can be controlled using
the \fB-o\fP/\fB--output\fP and the \fB--sep\fP options. \fB-o\fP/\fB--output\fP is a comma-separated list
of attribute names, that will be printed using the separator string from the
\fB--sep\fP option. \fB-o\fP/\fB--output\fP defaults to 'path'.
.PP
The \fB-v\fP/\fB--verbose\fP option produces output in the style of 'ls \fB-lh\fP'.
.PP
The \fB--json\fP and \fB--jsonl\fP options print each record as a JSON object to standard
output. The attributes of the JSON object are the same as in \fB-o\fP/\fB--output\fP. The
difference between both options is that \fB--json\fP produces one big JSON list
object containing all the records, whereas the \fB--jsonl\fP prints one JSON object
per record per line.
.PP
By default, pathnames are printed in color according to \fBdircolors\fP(1) rules,
unless NO_COLOR is set, \fB--color\fP=never, or \fBff\fP(1)'s output is not connected to
a terminal. Color output can be forced with \fB--color\fP=always.
.SH EXECUTION
The \fB-x\fP/\fB--exec\fP and \fB-X\fP/\fB--exec-batch\fP options allow to execute commands with
search results as arguments. \fB-x\fP/\fB--exec\fP starts one subprocess for every search
result, whereas \fB-X\fP/\fB--exec-batch\fP starts only one subprocess that gets all
search results at once.
The exit status of \fBff\fP(1) will be set accordingly if one of the commands
terminates with an error, see EXIT CODES below:
.PP
The following placeholders are substituted in the command:
.TP
.B
{}
full path, alias for {path}
.TP
.B
{/}
basename, alias for {name}
.TP
.B
{//}
parent directory, alias for {dir}
.TP
.B
{.}
path without file extension, alias for {pathx}
.TP
.B
{/.}
basename without file extension, alias for {namex}
.TP
.B
{..}
file extension, alias for {ext}
.TP
.B
{attribute}
replaced with the value of attribute
.SH PLUGINS

It is possible to write your own plugins and extend \fBff\fP(1)'s functionality. A
plugin is an ordinary python module. There are many examples included in the
source distribution and a plugin_template.py. User plugins are imported from
~/.\fBff\fP.
.SH EXCLUSION
The \fB-e\fP/\fB--exclude\fP option allows to exclude entries that match the
<expression>. Excluding takes place before all other tests are evaluated.
If a directory matches it will not be descended into, so entries below it
will not be produced.
.PP
Please note: Unless \fB-H\fP/\fB--hidden\fP is given, all hidden files will be excluded
using this method (the same as '\fB--exclude\fP hide=yes'). So it is not possible
to find hidden entries with
.PP
.nf
.fam C
    ff hidden=yes

.fam T
.fi
unless \fB-H\fP/\fB--hidden\fP is specified. The same applies to \fB-I\fP/\fB--ignored\fP.
.SH IGNORE FILES
By default, \fBff\fP(1) reads .gitignore, .ignore, .fdignore, and .ffignore files
and excludes all entries that match the set of patterns in one of these
files. The ignore syntax is described in \fBgitignore\fP(5).
.SH SORTING
Sorting is controlled with \fB-S\fP/\fB--sort\fP option. It is off by default, this way
entries are processed and printed as they are found. This makes better use
of \fBff\fP(1)'s parallel processing capabilities and is much faster.
.PP
\fB-S\fP/\fB--sort\fP takes an optional <attribute-list> argument. Without it, sorting is
done alphabetically on the entry's path. <attribute-list> is a
comma-separated list of attribute names that will be used as sort criteria.
The order can be reversed with \fB-R\fP/\fB--reverse\fP.
.SH EXAMPLES

Find only regular files in the current directory and all its subdirectories:
.PP
.nf
.fam C
      $ ff -tf

.fam T
.fi
Find only hidden files in directory /home/user:
.PP
.nf
.fam C
      $ ff -H hidden=yes /home/user

.fam T
.fi
Find files matching the glob pattern:
.PP
.nf
.fam C
      $ ff -g '*.txt'

.fam T
.fi
Find files executable by the user:
.PP
.nf
.fam C
      $ ff type=f perm:700

      $ ff type=f perm:u+x

      $ ff exec=yes

.fam T
.fi
.SH GET HELP

View a list of available plugins:
.PP
.nf
.fam C
    $ ff --list-plugins

.fam T
.fi
Get help on a specific plugin, including the attributes it provides:
.PP
.nf
.fam C
    $ ff --help <plugin>

.fam T
.fi
View a list of all available attributes:
.PP
.nf
.fam C
    $ ff --list-attributes

.fam T
.fi
View a list of all available types and their supported operators:
.PP
.nf
.fam C
    $ ff --list-types

.fam T
.fi
.SH EXIT CODES
.TP
.B
0
Everything went fine.
.TP
.B
1
There was an error in the arguments provided by the user.
.TP
.B
2
One or more \fB--exec\fP or \fB--exec-batch\fP subprocesses had errors.
.TP
.B
3
One or more \fBff\fP processes had unrecoverable errors.
.TP
.B
10
A plugin had an unrecoverable error.
.TP
.B
11
An attribute was specified that does not exist.
.TP
.B
12
There was an error in a test expression.
.SH ENVIRONMENT
.TP
.B
FF_OPTIONS
Default options to use for every invocation of \fBff\fP(1).
.TP
.B
FF_PLUGIN_DIRS
A colon-separated list of additional directories from which to load plugins.
.TP
.B
LS_COLORS
A list of dircolors rules, see \fBdircolors\fP(1) and \fBdir_colors\fP(5).
.TP
.B
NO_COLOR
Do not produce colorful terminal output regardless of \fBff\fP(1)'s options.
.SH SEE ALSO
\fBfind\fP(1) \fBfd\fP(1)
.SH AUTHOR
Lars Gustaebel <lars@gustaebel.de>
.PP
https://github.com/gustaebel/\fBff\fP/
