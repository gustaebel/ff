.\" Text automatically generated by txt2man
.TH ff 1 "02 June 2020" "ff 560" ""
.SH NAME
\fBff \fP- Find files in the filesystem
\fB
.SH SYNOPSIS
.nf
.fam C
\fBff\fP [<options>] [<test/directory> \.\.\. | [\fB-D\fP] <directory> \.\.\.]

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBff\fP(1) is a tool for finding files in the filesystem that all share a set of
common features. Its scope is similar to \fBfind\fP(1) and \fBfd\fP(1) but it aims
at being more accessible and easier to use than \fBfind\fP(1) and more versatile
and powerful than \fBfd\fP(1).
.PP
\fBff\fP(1) takes a set of expressions and directories as arguments and uses them
for searching the filesystem. If no arguments are specified, \fBff\fP(1) lists all
files and directories below the directory you are currently in.
.PP
Whether an argument is a test or a directory is auto-detected.
Directories may be at the start or the end of the list of arguments. They are
identified as directories when they contain at least one '/' and point to an
existing name in the filesystem. However, directories can be explicitly
specified using the \fB-D\fP/\fB--directories\fP option, in which case auto-detection
will not be used. If no directory argument is found the current directory is
used as the starting point.
.PP
\fBff\fP(1) uses parallel processes to speed up searching by default. The number of
processes depends on the number of CPU cores and can be controlled with
\fB-j\fP/\fB--jobs\fP.
.SH OPTIONS
Global options:
.TP
.B
\fB--cache\fP
Location of the metadata cache (default: /home/lars/.cache/ff.db).
.TP
.B
\fB--no-cache\fP
Do not use the metadata cache.
.TP
.B
\fB-j\fP, \fB--jobs\fP <num>
Set number of processes to use for searching and executing (default: the number of CPU cores).
.TP
.B
<test/directory>
A test expression for matching files or a directory to search.
.TP
.B
\fB-D\fP, \fB--directories\fP <path> [<path> \.\.\.]
Search entries in these paths (default is current directory).
.PP
Commands:
.TP
.B
\fB-h\fP, \fB--help\fP [<plugin>]
Show this help message or the help message for a particular plugin.
.TP
.B
\fB--version\fP
Show program's version number and exit.
.TP
.B
\fB--list-attributes\fP
Show a list of available attributes to use for searching, sorting and output.
.TP
.B
\fB--list-plugins\fP
Show the list of available plugins.
.TP
.B
\fB--list-types\fP
Show the list of available types.
.PP
Search options:
.TP
.B
\fB-H\fP, \fB--hide\fP
Do not show hidden files and directories.
.TP
.B
\fB-I\fP, \fB--ignore\fP
Do not show files that are excluded by patterns from .(git|fd|\fBff\fP)ignore files.
.TP
.B
\fB-d\fP, \fB--depth\fP <range>
Show only files that are located at a certain depth level of the directory tree that is within the given <range>. A <range> is a string of the form '<start>-<stop>'. <start> and <stop> are optional and may be omitted. <range> may also be a single number. It is possible to specify multiple ranges separated by comma.
.TP
.B
\fB--no-parent-ignore\fP
Do not read patterns from ignore files from parent directories.
.TP
.B
\fB-e\fP, \fB--exclude\fP <test>
Exclude entries that match the given test.
.TP
.B
\fB-c\fP, \fB--case\fP <mode>
How to treat the case of text attributes (smart, ignore or sensitive).
.TP
.B
\fB-L\fP, \fB--follow\fP
Follow symbolic links.
.TP
.B
\fB--one-file-system\fP, \fB--mount\fP, \fB--xdev\fP
Do not descend into different file systems.
.PP
Simple pattern options:
.TP
.B
\fB-g\fP, \fB--glob\fP
Treat the pattern as a literal string.
.TP
.B
\fB-r\fP, \fB--regex\fP
Perform a regular-expression based search (default).
.TP
.B
\fB-F\fP, \fB--fixed-strings\fP
Treat the pattern as a literal string.
.TP
.B
\fB-p\fP, \fB--full-path\fP
Search full path (default: basename only).
.PP
Output options:
.TP
.B
\fB-x\fP, \fB--exec\fP <cmd>
Execute a command for each search result.
.TP
.B
\fB-X\fP, \fB--exec-batch\fP <cmd>
Execute a command with all search results at once.
.TP
.B
\fB-C\fP, \fB--color\fP <when>
When to use colors: never, *auto*, always.
.TP
.B
\fB-a\fP, \fB--absolute-path\fP
Show absolute instead of relative paths.
.TP
.B
\fB-0\fP, \fB--print0\fP
Separate results by the null character.
.TP
.B
\fB-v\fP, \fB--verbose\fP
Produce output similar to `ls \fB-l\fP`.
.TP
.B
\fB-S\fP, \fB--sort\fP [<attribute-list>]
Sort entries by path or any other attribute.
.TP
.B
\fB-R\fP, \fB--reverse\fP
Reverse the sort order.
.TP
.B
\fB--count\fP
Count the attributes from <attribute-list> and print statistics, instead of the result, the default is to count the total size and the file types of the entries found. Add \fB--json\fP for JSON output.
.TP
.B
\fB-l\fP, \fB--limit\fP N
Limit output to at most N entries.
.TP
.B
\fB-1\fP
Print only the first entry and exit immediately.
.TP
.B
\fB-o\fP, \fB--output\fP <attribute-list>
Print each entry by using a template of comma-separated attributes. The special value 'file' stands for all file attributes.
.TP
.B
\fB--sep\fP
Separate each attribute of \fB--output\fP with <string>, default is a single space.
.TP
.B
\fB--all\fP
Show all entries including the ones with missing attribute values.
.TP
.B
\fB--json\fP
Print attributes as one big json object to stdout.
.TP
.B
\fB--jsonl\fP
Print attributes as jsonl (one json object per line) to stdout.
.TP
.B
\fB--si\fP
Parse and print file sizes in units of 1K=1000 bytes instead of 1K=1024 bytes.
.SH TESTS
All remaining command line arguments that do not point to directories will be
used as tests. Each filesystem entry is checked against this list of tests
and is included in the result if it matches.
.PP
A test basically has the form:
.PP
.nf
.fam C
    [<[plugin.]attribute><operator>]<value>

.fam T
.fi
So, a test compares a certain <value> (or pattern) with the value of a
certain <attribute> of a filesystem entry. The type of comparison performed
is indicated by the <operator>.
.PP
The simplest form of a test is to just specify a <value> which means that
each entry's basename will be matched against <value> which is a regular
expression. It is short for a test with the following syntax:
.PP
.nf
.fam C
    file.name~<value>

.fam T
.fi
(The default behavior for this shorthand can be changed with the \fB-r\fP/\fB--regex\fP,
\fB-F\fP/\fB--fixed-strings\fP, \fB-g\fP/\fB--glob\fP and \fB-p\fP/\fB--full-path\fP options.)
.PP
It is good practice to use full attribute names and to quote either the value
or the whole test to prevent the shell from interfering with characters like
\(cq*', '(', ')', '<', '>', '!', etc.
.PP
Tests can be grouped with 'AND' and 'OR' operators and parenthesis, whereas
the 'AND' is always implied and can be omitted. Please note that parenthesis
must be escaped or quoted properly to prevent the shell from interpreting
them. It is recommended to use the alternative forms '{{' and '}}'.
.SH ATTRIBUTES
\fBff\fP(1) lets you test for a wide variety of file attributes. Attributes are
provided by plugins. Essential plugins like 'file' and 'mime' are built in,
but you can also add your own plugins written in \fBpython\fP(1).
.PP
You can list all available attributes this way: `\fBff\fP \fB--list-attributes\fP`.
.PP
The full name of an attribute consists of the <plugin> name, a dot, and the
<attribute> name. The plugin part of the attribute is optional unless the
same attribute name is provided by multiple plugins. It will produce an error
if an attribute name in a test is ambiguous. An exception is the 'file'
plugin whose attribute names are global, always take precedence and will
never produce an error. It is recommended to always use the full attribute
name.
.PP
The 'file' plugin provides all basic attributes for filesystem entries:
.TP
.B
[file.]path :: path
The full pathname of the file. It will be relative to the current working directory depending on the <directory> arguments that were given on the command line. This can be changed with the \fB-a\fP/\fB--absolute\fP path option.
.TP
.B
[file.]root :: path
The start directory the file was found in.
.TP
.B
[file.]relpath :: path
The pathname of the file relative to the start directory.
.TP
.B
[file.]dir :: path
The dirname portion of the file.
.TP
.B
[file.]name :: path
The basename portion of the file
.TP
.B
[file.]ext :: string
The file extension without the leading dot or the empty string if
the file has no extension.
.TP
.B
[file.]pathx :: path
The file path without the extension.
.TP
.B
[file.]namex :: path
The file basename without the extension.
.TP
.B
[file.]mode :: mode
The mode and permission bits of the file.
.TP
.B
[file.]type :: filetype
The file type: one of 'd'/'directory', 'f'/'file', 'l'/'symlink', 's'/'socket', 'p'/'pipe'/'fifo', 'char', 'block', 'door', 'port', 'whiteout' or 'other'.
.TP
.B
[file.]device :: number
The number of the device the file is located.
.TP
.B
[file.]inode :: number
The number of the inode of the file.
.TP
.B
[file.]samedev :: boolean
Whether the file is on the same device as the start directory.
.TP
.B
[file.]depth :: number
The depth of the file relative to the start directory.
.TP
.B
[file.]exec :: boolean
Whether the file is executable or not.
.TP
.B
[file.]size :: size
The size of the file in bytes. All types except 'file' have a size
of 0.
.TP
.B
[file.]mtime :: time
The modification time of the file in seconds since epoch.
.TP
.B
[file.]ctime :: time
The inode change time of the file in seconds since epoch.
.TP
.B
[file.]atime :: time
The access time of the file in seconds since epoch.
.TP
.B
[file.]time :: time
An alias for 'mtime'.
.TP
.B
[file.]perm :: mode
The permission bits of the file without the file type bits.
.TP
.B
[file.]links :: number
The number of links to the inode.
.TP
.B
[file.]uid :: number
The user id of the owner of the file.
.TP
.B
[file.]gid :: number
The group id of the owner of the file.
.TP
.B
[file.]user :: string
The user name of the owner of the file.
.TP
.B
[file.]group :: string
The group name of the owner of the file.
.TP
.B
[file.]hide :: boolean
Whether the the name of the file starts with a dot.
.TP
.B
[file.]hidden :: boolean
Whether the file is "hidden" or not, i.e. if one of the path
components contains a leading dot.
.TP
.B
[file.]empty :: boolean
Whether the file or directory is empty or not.
.TP
.B
[file.]link :: path
The target path of a symbolic link relative to its parent directory. Empty if the file is not a symbolic link.
.TP
.B
[file.]target :: path
The full target path of a symbolic link. Empty if the file is not a symbolic link.
.TP
.B
[file.]broken :: boolean
Whether the target of a symbolic link points to a file that does not exist.
.TP
.B
[file.]text :: boolean
Whether the file contains text or binary data.
.TP
.B
[file.]mount :: boolean
Whether the entry is a mountpoint.
.PP
The 'mime' plugin provides attributes regarding the mimetype and encoding of
files. It depends on the 'file-magic' python module.
.TP
.B
mime.mime :: string
The full mime type of the file.
.TP
.B
mime.type :: string
The content type of the file, i.e. the first part of the mime type.
.TP
.B
mime.subtype :: string
The sub type of the file, i.e. the second part of the mime type.
.TP
.B
mime.encoding :: string
The encoding of the file.
.TP
.B
mime.name :: string
The full text description of the type of the file.
.PP
The 'medium' plugin provides attributes for media files. It depends on the
\(cqpymediafile' python module.
.TP
.B
medium.duration :: duration
The duration of a medium (audio, video) in seconds.
.TP
.B
medium.artist :: string
The artist audio tag of the file.
.TP
.B
medium.album :: string
The album audio tag of the file.
.TP
.B
medium.title :: string
The title audio tag of the file.
.TP
.B
medium.genre :: string
The genre audio tag of the file.
.TP
.B
medium.date :: string
The date audio tag of the file.
.TP
.B
medium.format :: string
The format of an image ('png', 'jpeg', etc.) in case the file is an image.
.TP
.B
medium.width :: number
The width of a visual medium (image, video) in pixel.
.TP
.B
medium.height :: number
The height of a visual medium (image, video) in pixel.
.RE
.PP

.SH TYPES
Each attribute has a certain type that describes how its value is supposed to
be interpreted and which operators it supports. Beside the common 'string',
\(cqnumber' and 'boolean' types there are also types for file sizes, file
permissions, timestamps, durations etc.
.PP
There are a number of predefined date and time parsing patterns for
attributes having a 'time' type.
.TP
.B
- YY-mm-dd HH:MM:SS
.TP
.B
- YY-mm-dd HH:MM
.TP
.B
- YYmmddHHMM
.TP
.B
- YY-mm-dd
.TP
.B
- YYmmdd
.TP
.B
- HH:MM:SS
.TP
.B
- HH:MM
.TP
.B
- HHMM
Durations consist of one or more partial time designations that are summed up, e.g.:
.PP
.nf
.fam C
    1h30m25s

.fam T
.fi
The valid units are: 's' for seconds, 'm' for minutes, 'h' for hours, 'd' for
days, 'w' for weeks (7 days), 'M' for months (30 days) and 'y' for years (365
days). If no unit is given 'm' for minutes is assumed.
.SH OPERATORS
The third component in a test beside the <attribute> and the <value> is the
<operator>.
.PP
There are operators for numbers:
.TP
.B
=
attribute is equal to <value>
.TP
.B
+= >=
attribute is greater than or equal to <value>
.TP
.B
-= <=
attribute is less than or equal to <value>
.TP
.B
+ >
attribute is greater than <value>
.TP
.B
- <
attribute is less than <value>
.PP
Please note that the > and < characters must be properly quoted to avoid
being interpreted as redirections by the shell, which is why the + and -
forms are preferred.
.PP
Operators for strings:
.TP
.B
=
attribute is equal to <value>
.TP
.B
:
contains substring <value>
.TP
.B
~
matches regular expression <value>
.TP
.B
%
matches glob pattern <value>
.PP
Operators for lists of strings:
.TP
.B
=
one string in the list is equal to <value>
.TP
.B
:
one string contains substring <value>
.TP
.B
~
one string matches regular expression <value>
.TP
.B
%
one string matches glob pattern <value>
.PP
Operators for booleans:
.TP
.B
=
attribute is equal to <value>, which may be one of (true, t, 1, yes,
y, on) or (false, f, 0, no, n, off). The case is ignored.
.PP
Operators for mode:
.TP
.B
=
all bits from the attribute are exactly equal to <value>
.TP
.B
:
all bits that are set in <value> are also set in the attribute
.TP
.B
~
any of the bits that are set in <value> are set in the attribute
.SH FILE REFERENCES
It is possible to pass a path of a file as reference instead of a <value>. To
use a reference you pass a '{}' followed by the path name. For example, to
find all files newer than foo/bar/example.txt you do:
.PP
.nf
.fam C
    ff mtime+{}foo/bar/example.txt

.fam T
.fi
The default behavior is to use the same attribute of the referenced file as
the one it is supposed to be compared to, but it is also possible to use a
different one:
.PP
.nf
.fam C
    ff mtime+{atime}foo/bar/example.txt

.fam T
.fi
.SH OUTPUT
The contents of what is printed to standard output can be controlled using
the \fB-o\fP/\fB--output\fP and the \fB--sep\fP options. \fB-o\fP/\fB--output\fP is a comma-separated list
of attribute names, that will be printed using the separator string from the
\fB--sep\fP option. \fB-o\fP/\fB--output\fP defaults to 'path'. Use \fB--output\fP=file as a
shorthand for all attributes from the 'file' plugin.
.PP
Entries that are missing a value for one of the attributes in the list from
\fB-o\fP/\fB--output\fP will not be printed unless the \fB--all\fP option is given.
.PP
The \fB-v\fP/\fB--verbose\fP option produces output in the style of 'ls \fB-lh\fP'.
.PP
The \fB--json\fP and \fB--jsonl\fP options print each record as a JSON object to standard
output. The attributes of the JSON object are the same as in \fB-o\fP/\fB--output\fP, but
\fB--all\fP is implied and missing attributes have a null value. The difference
between both options is that \fB--json\fP produces one big JSON list object
containing all the records, whereas the \fB--jsonl\fP prints one JSON object per
record per line.
.PP
By default, pathnames are printed in color according to \fBdircolors\fP(1) rules,
unless NO_COLOR is set, \fB--color\fP is set to 'never', or \fBff\fP(1) is not connected
to a terminal. Color output can be forced with \fB--color\fP=always.
.PP
Furthermore, the formatting of individual attribute values can be controlled
with modifiers. The syntax is: <attribute-name>:<modifier>. <modifier> can be
one of:
.TP
.B
h
human-readable formatting for size types
.TP
.B
x
hexadecimal representation for number types
.TP
.B
o
octal representation for number types, e.g. 'file.mode' and 'file.perm'.
.TP
.B
n
ignore null values (otherwise the whole record would not be printed)
.PP
Example:
.PP
.nf
.fam C
    ff --output size:h,perm:o,path --sort size


.fam T
.fi
.SH EXECUTION
The \fB-x\fP/\fB--exec\fP and \fB-X\fP/\fB--exec-batch\fP options allow executing commands with
search results as their arguments. \fB-x\fP/\fB--exec\fP starts one process for every
result, whereas \fB-X\fP/\fB--exec-batch\fP starts one process that gets all search
results at once.
The exit status of \fBff\fP(1) will be set accordingly if one of the commands
terminates with an error, see EXIT CODES below:
.PP
The following placeholders are substituted in the command template:
.TP
.B
{}
full path, alias for {file.path}
.TP
.B
{/}
basename, alias for {file.name}
.TP
.B
{//}
parent directory, alias for {file.dir}
.TP
.B
{.}
path without file extension, alias for {file.pathx}
.TP
.B
{/.}
basename without file extension, alias for {file.namex}
.TP
.B
{..}
file extension, alias for {file.ext}
.TP
.B
{attribute}
replaced with the value of attribute
.PP
If no placeholder is found in the command template the full path is used as
the argument. The \fB-o\fP/\fB--output\fP option has no effect on \fB-x\fP/\fB--exec\fP and
\fB-X\fP/\fB--exec-batch\fP.
.SH EXCLUSION
The \fB-e\fP/\fB--exclude\fP option allows to exclude entries that match the <test>.
Excluding takes place before all other tests are evaluated. If a directory
matches it will not be descended into, so entries below it will not be
produced.
.PP
If \fB-H\fP/\fB--hide\fP is given, all hidden files will be excluded using this method,
i.e. the option translates to '\fB--exclude\fP hide=yes'. The same applies to
\fB-I\fP/\fB--ignore\fP which tranlates to '\fB--exclude\fP ignored=yes'.
.SH IGNORE FILES
By default, \fBff\fP(1) reads .gitignore, .ignore, .fdignore, and .ffignore files
and excludes all entries that match the set of patterns in one of these
files. The syntax of these files is described in \fBgitignore\fP(5).
.SH SORTING
Sorting is controlled with the \fB-S\fP/\fB--sort\fP option. It is off by default, this
way entries are processed and printed as soon as they are found instead of
being collected and sorted first. This makes better use of \fBff\fP(1)'s parallel
processing capabilities and is much faster.
.PP
\fB-S\fP/\fB--sort\fP takes an optional <attribute-list> argument. Without it, sorting is
done alphabetically on the entry's path. <attribute-list> is a
comma-separated list of attribute names that will be used as sort criteria.
The sort order can be reversed with \fB-R\fP/\fB--reverse\fP.
.SH COUNTING
If the \fB--count\fP option is specified, instead of printing the results of the
search, count the entries and the attributes from <attribute-list> and print
these counts to standard output. If \fB--count\fP is given without a list of
attributes the total size of all files and statistics about the different
file types is displayed. If <attribute-list> is present a total or a count of
these attributes is done. There is always a "_total" field that contains the
number of all entries that matched.
.PP
There are two possible ways in which attributes are counted that depend on
their type. Types like file size or duration that vary widely are summed up
to a total and for all other types the number of occurrences of each
individual value is counted. This way you can get an overview on the variety
of values of an attribute. For some attributes \fB--count\fP makes not much sense,
e.g. path or time. It is best suited for attributes like type, perm, hidden,
depth, uid, gid, etc.
.PP
The way a type is counted can be checked with \fB--list-types\fP.
.SH PLUGINS
It is possible to write your own plugins and extend \fBff\fP(1)'s functionality. A
plugin is an ordinary python module. There are many examples included in the
source distribution and a file 'plugin_template.py' to start from. User
plugins are imported from the ~/.\fBff\fP directory.
.SH EXAMPLES

Find only regular files in the current directory and all its subdirectories:
.PP
.nf
.fam C
      $ ff -tf

.fam T
.fi
Find only hidden files in directory /home/user:
.PP
.nf
.fam C
      $ ff hidden=yes /home/user

.fam T
.fi
Find files matching the glob pattern:
.PP
.nf
.fam C
      $ ff -g '*.txt'

.fam T
.fi
Find files executable by the user:
.PP
.nf
.fam C
      $ ff type=f perm:700

      $ ff type=f perm:u+x

      $ ff exec=yes

.fam T
.fi
.SH GET HELP

View a list of available plugins:
.PP
.nf
.fam C
    $ ff --list-plugins

.fam T
.fi
Get help on a specific plugin, including the attributes it provides:
.PP
.nf
.fam C
    $ ff --help <plugin>

.fam T
.fi
View a list of all available attributes:
.PP
.nf
.fam C
    $ ff --list-attributes

.fam T
.fi
View a list of all available types and their supported operators:
.PP
.nf
.fam C
    $ ff --list-types

.fam T
.fi
.SH EXIT CODES
.TP
.B
1
There was an error in the arguments provided by the user.
.TP
.B
2
One or more \fB--exec\fP or \fB--exec-batch\fP subprocesses had errors.
.TP
.B
3
One or more \fBff\fP processes had unrecoverable errors.
.TP
.B
10
A plugin had an unrecoverable error.
.TP
.B
11
An attribute was specified that does not exist.
.TP
.B
12
There was an error in a test expression.
.RE
.PP

.SH ENVIRONMENT
.TP
.B
FF_OPTIONS
Default options to use for every invocation of \fBff\fP(1).
.TP
.B
FF_PLUGIN_DIRS
A colon-separated list of additional directories from which to load plugins.
.TP
.B
LS_COLORS
A list of dircolors rules, see \fBdircolors\fP(1) and \fBdir_colors\fP(5).
.TP
.B
NO_COLOR
Do not produce colorful terminal output regardless of \fBff\fP(1)'s options.
.SH SEE ALSO
\fBfind\fP(1) \fBfd\fP(1)
.SH AUTHOR
Lars Gustaebel <lars@gustaebel.de>
.PP
https://github.com/gustaebel/\fBff\fP/
